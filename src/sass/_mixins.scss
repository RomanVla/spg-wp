
/// Convert pixel-values to rem-values.
///
/// @example scss
///    .rem-2 { font-size: rem(24px); }
///
///    // CSS Output
///    .rem-2 {
///      font-size: 1.5rem;
///    }
$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  }

  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline * 1rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

$figure-size-list: 20 24 28 32 40 48 50 64 72 82 96 164 256;
@mixin add-figure-block-size($target:'') {
  @each $figure-size in $figure-size-list {
    .icon.is-#{$figure-size}x#{$figure-size}#{if($target == '', '', '-' + $target)} {
      height: #{$figure-size}px;
      width: #{$figure-size}px;
      font-size: rem(#{$figure-size}px);
    }
    .image.is-#{$figure-size}x#{$figure-size}#{if($target == '', '', '-' + $target)} {
      height: #{$figure-size}px;
      width: #{$figure-size}px;
    }
  }
}

$min-max-width-list: 250 200 150 120 100;
@mixin add-block-min-max-width($target:'') {
  @each $min-max-width in $min-max-width-list {
    .is-min-width-#{$min-max-width}#{if($target == '', '', '-' + $target)} {
      min-width: #{$min-max-width}px;
      margin: auto;
    }

    .is-max-width-#{$min-max-width}#{if($target == '', '', '-' + $target)} {
      max-width: #{$min-max-width}px;
      margin: auto;
    }

  }
}

$min-max-height-list: 450 400 350 300 250 200 180 150 120 100;
@mixin add-block-min-max-height($target:'') {
  @each $min-max-height in $min-max-height-list {
    .is-min-height-#{$min-max-height}#{if($target == '', '', '-' + $target)} {
      min-height: #{$min-max-height}px;
      margin: auto;
    }

    .is-max-height-#{$min-max-height}#{if($target == '', '', '-' + $target)} {
      max-height: #{$min-max-height}px;
      margin: auto;
    }

  }
}

@mixin font-size($value: 16) {
  font-size: ($value / 10) + rem;
  font-size: $value + px;
}

@mixin h1-font-size() {

  @include font-size(38);

  @include media-breakpoint-up(sm) {
    @include font-size(38);
  }

  @include media-breakpoint-up(lg) {
    @include font-size(45);
  }

  @include media-breakpoint-up(lg) {
    @include font-size(52);
  }

}

@mixin h2-font-size() {

  @include font-size(20);

  @include media-breakpoint-up(sm) {
    @include font-size(20);
  }

  @include media-breakpoint-up(lg) {
    @include font-size(22);
  }

  @include media-breakpoint-up(lg) {
    @include font-size(24);
  }

}